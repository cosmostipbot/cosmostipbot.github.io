{"version":3,"sources":["fonts/Roboto/Roboto-Regular.ttf","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","phantom","display","padding","height","width","foot","backgroundColor","borderTop","textAlign","position","left","bottom","link","color","Footer","style","className","href","React","Component","App","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Jumbotron","src","alt","Container","Row","Col","map","command","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,4C,gLCErCC,EAAU,CACdC,QAAS,QACTC,QAAS,OACTC,OAAQ,OACRC,MAAO,QAGHC,EAAO,CACTC,gBAAiB,UACjBC,UAAW,oBACXC,UAAW,OACXN,QAAS,OACTO,SAAU,QACVC,KAAM,IACNC,OAAQ,IACRR,OAAQ,OACRC,MAAO,QAGLQ,EAAO,CACTC,MAAO,QAIUC,E,uKAEnB,OACC,yBAAKC,MAAOf,GACC,4BAAQe,MAAOV,GACX,8EACA,0BAAMW,UAAU,eACZ,uBAAGC,KAAK,wBAAwBF,MAAOH,GACnC,0BAAMI,UAAU,QAAhB,uBAEJ,uBAAGC,KAAK,kBAAkBF,MAAOH,GAC7B,0BAAMI,UAAU,QAAhB,0B,GAXQE,IAAMC,W,wDCqE3BC,MAjFf,WAgBE,OACE,yBAAKJ,UAAU,OACd,kBAACK,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACzB,kBAACF,EAAA,EAAOG,MAAR,CAAcP,KAAK,SAAnB,iBACA,kBAACI,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKb,UAAU,WACb,kBAACa,EAAA,EAAIC,KAAL,CAAUb,KAAK,SAAf,QACA,kBAACY,EAAA,EAAIC,KAAL,CAAUb,KAAK,SAAf,UACA,kBAACc,EAAA,EAAD,CAAaC,MAAM,QAAQJ,GAAG,sBAC5B,kBAACG,EAAA,EAAYE,KAAb,CAAkBhB,KAAK,eAAvB,OACA,kBAACc,EAAA,EAAYE,KAAb,CAAkBhB,KAAK,eAAvB,SACA,kBAACc,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBhB,KAAK,eAAvB,gBASN,kBAACkB,EAAA,EAAD,KACE,yBAAKnB,UAAU,cACb,yBAAKoB,IAAI,sBAAsBpB,UAAU,aAAaqB,IAAI,uBAI9D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,0CAGP,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,6DAAqC,6BAAK,qGAA6E,6BAAK,+BAEnI,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKxB,UAAU,YACb,4BAtDS,CAAC,6NAuDMyB,KAAI,SAAAC,GAAO,OAAI,4BAAKA,UAM1C,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,iDAEL,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKxB,UAAU,YACb,4BA9DkB,CAAC,2JAAD,wrCA+DSyB,KAAI,SAAAC,GAAO,OAAI,4BAAKA,WAOzD,kBAAC,EAAD,QC9EcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.007ad19b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Roboto-Regular.11eabca2.ttf\";","import React from \"react\";\n\nconst phantom = {\n  display: 'block',\n  padding: '20px',\n  height: '60px',\n  width: '100%',\n};\n\nconst foot = {\n    backgroundColor: \"#F8F8F8\",\n    borderTop: \"1px solid #E7E7E7\",\n    textAlign: \"left\",\n    padding: \"20px\",\n    position: \"fixed\",\n    left: \"0\",\n    bottom: \"0\",\n    height: \"60px\",\n    width: \"100%\",\n};\n\nconst link = {\n    color: \"grey\",\n}\n\n\nexport default class Footer extends React.Component {\n\trender() {\n\t\treturn(\n\t\t\t<div style={phantom}>\n                <footer style={foot}>\n                    <span>&copy; All rights reserved. @cosmostipbot 2020</span>\n                    <span className=\"float-right\">\n                        <a href=\"/terms-and-conditions\" style={link}>\n                            <span className=\"ml-4\">Terms & Conditions</span>\n                        </a>\n                        <a href=\"/privacy-policy\" style={link}>\n                            <span className=\"ml-4\">Privacy Policy</span>\n                        </a>\n                    </span>\n                </footer>\n\t\t\t</div>\n\t\t);\n\n\t}\n}\n","import React from 'react';\nimport './App.css';\n\nimport Footer from './Footer';\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction App() {\n  const tweetCommand = [\n    `!tip: Tips are sent through public tweets. On Twitter: Tag @cosmos_tipbot in a tweet and mention !tip <amount> <@username>. Example:\n    @cosmos_tipbot !tip 5 @toschdev\n    would send a 5 ATOM tip to user @toschdev.`,\n  ];\n  const commandsWithExplanation = [\n    `!help: The tip bot will respond to your DM with a list of commands and their functions. If you forget something, use this to get a hint of how to do it!`,\n    `!register: Registers your user ID for an account that is tied to it.  This is used to store your tips. Make sure to withdraw to a private wallet, as the tip bot is not meant to be a long term storage device for ATOM.`,\n    `!balance: This returns the balance of the account linked with your user ID.`,\n    `!account: Returns the account number that is tied to your user ID (currently unique to platform).  You can use this to deposit more ATOM to tip from your personal wallet.`,\n    `!withdraw: Proper usage is !withdraw cosmosxxxxxxxx.  This will send the full balance of your tip account to the provided Cosmos account.  Optional: You can include an amount to withdraw by sending !withdraw <amount> <account>.  Example: !withdraw 1 cosmosxxxxx would withdraw 1 ATOM to account cosmosxxxxx.`,\n    `!donate: Proper usage is !donate 1234.  This will send the requested donation to the Cosmos Tip Bot donation account to help fund development efforts.`,\n    `!setlanguage: Used to change the default language of the bot.  A list of available languages is provided in the !languages command.  Proper use is \"!setlanguage German\" to change your language to German.`,\n    `!languages: Returns a list of languages available for translation`,\n  ];\n  return (\n    <div className=\"App\">       \n     <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">@cosmostipbot</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#link\">How-To</Nav.Link>\n          <NavDropdown title=\"About\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item href=\"#action/3.1\">FAQ</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.2\">Terms</NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item href=\"#action/3.4\">About Us</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n        {/* <Form inline>\n          <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n          <Button variant=\"outline-success\">Search</Button>\n        </Form> */}\n      </Navbar.Collapse>\n    </Navbar>\n      <Jumbotron>\n        <div className=\"header-div\">\n          <img src=\"/img/background.png\" className=\"header-img\" alt=\"comostipbot logo\" />\n        </div>\n      </Jumbotron>\n\n      <Container>\n        <Row>\n          <Col><h1>Commands</h1></Col>\n        </Row>\n\n        <Row>\n          <Col><b>Tweet / Group Message Commands</b><br/><i>Tips are sent through public tweets. These are processed in real time.</i><br/><br/></Col>\n        </Row>\n        <Row>\n          <Col>\n            <div className=\"commands\">\n              <ul>\n                {tweetCommand.map(command => <li>{command}</li>)}\n              </ul>\n            </div>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col><b>DM / PM Commands</b></Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"commands\">\n                <ul>\n                  {commandsWithExplanation.map(command => <li>{command}</li>)}\n                </ul>\n              </div>\n            </Col>\n          </Row>\n      </Container>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './fonts/Roboto/Roboto-Regular.ttf';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}